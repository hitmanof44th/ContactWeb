@using ContactData.Models;
@using ContactData.Interfaces;
@using System.Diagnostics;
@namespace Components
<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Caption</h4>
                <button type="button" class="close"
                        @onclick="@Cancel">
                    &times;
                </button>
            </div>
            <div class="modal-body">
                <div class="dialog-body">
                    <div class="row">
                        <div class="form-group">
                            <InputText style="width: 100%;" id="firstName" @bind-Value="thecontact.FirstName" placeholder="First Name" />
                        </div>
                        <div class="form-group">
                            <InputText style="width: 100%;" id="lastName" @bind-Value="thecontact.LastName" placeholder="Last Name" />
                        </div>
                        <div class="form-group">
                            <InputText style="width: 100%;" id="street" @bind-Value="thecontact.Address.Street" placeholder="Street" />
                        </div>
                        <div class="form-group">
                            <InputText style="width: 100%;" id="city" @bind-Value="thecontact.Address.City" placeholder="City" />
                        </div>
                        <div class="form-group">
                            <InputText style="width: 100%;" id="state" @bind-Value="thecontact.Address.State" placeholder="State" />
                        </div>
                        <div class="form-group">
                            <InputText style="width: 100%;" id="postalCode" @bind-Value="thecontact.Address.PostalCode" placeholder="Postal Code" />
                        </div>
                    </div>
                    @if (!addresscheck)
                    {
                        <div class="form-group">
                            Address Not Valid
                        </div>

                    }
                </div>
            </div>
            <div class="modal-footer">

                <button type="button" class="btn btn-primary"
                        @onclick=@Ok>
                    Save
                </button>
                <button type="button" class="btn btn-warning"
                        @onclick="@Cancel">
                    Don't Save
                </button>

            </div>
        </div>
    </div>
</div>

@code {
    [Inject]
    public IAdressValidator AddressService { get; set; }
    [Inject]
    public IContactService ContactService { get; set; }
    [Parameter] public string Caption { get; set; }
    [Parameter] public bool isNew { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    private bool addresscheck { get; set; } = true;
    [Parameter]
    public Contact thecontact { get; set; } =
    new Contact
        {
            FirstName = "",
            LastName = "",
            Email = "",
            Address = new Address
            {
                Street = "",
                City = "",
                State = "",
                PostalCode = ""
            }
        };


    private Task Cancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private async Task Ok()
    {


        if (isNew)
        {
       
   
            if (!AddressService.AddressValidate(thecontact))
            {
                addresscheck = false;
            }
            else
            {
                await ContactService.CreateContactAsync(thecontact);
                await OnClose.InvokeAsync(true);
            }
           
        }
        else
        {
            await ContactService.UpdateContactAsync(thecontact);
            await OnClose.InvokeAsync(true);
        }


    }

}